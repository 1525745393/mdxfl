#!/usr/bin/env python

import os
import xml.dom.minidom as xmldom
import base64
import hashlib
import time
import io
import logging
from PIL import Image
import argparse

# 设置日志记录
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

VIDEO_FORMATS = ['.mkv', '.mp4', '.rmvb', '.avi', '.wmv', '.ts']
IGNORED_FORMATS = ['.vsmeta', '.jpg', '.nfo', '.srt', '.ass', '.ssa', '.png', '.db']

def scan_directory(directory, convert_list, poster_suffix, fanart_suffix):
    """
    遍历目录并处理视频文件，生成 .vsmeta 文件
    """
    for root, dirs, files in os.walk(directory):
        dirs[:] = [d for d in dirs if d != '@eaDir']  # 跳过系统目录
        video_files = filter_video_files(files)

        for filename in video_files:
            vsmeta_path = os.path.join(root, filename + '.vsmeta')
            if not os.path.exists(vsmeta_path):
                nfo_path = os.path.join(root, os.path.splitext(filename)[0] + '.nfo')
                if os.path.exists(nfo_path):
                    convert_list.append(nfo_path)
                    try:
                        action(
                            nfo_path,
                            vsmeta_path,
                            os.path.join(root, os.path.splitext(filename)[0] + poster_suffix),
                            os.path.join(root, os.path.splitext(filename)[0] + fanart_suffix),
                        )
                    except Exception as e:
                        logging.error(f"Error processing {nfo_path}: {e}")
                else:
                    logging.warning(f"Missing .nfo file for {filename}")


def filter_video_files(files):
    """
    过滤视频文件
    """
    return [f for f in files if os.path.splitext(f)[1].lower() in VIDEO_FORMATS]


def action(nfo_path, target_path, poster_path, fanart_path):
    """
    根据 .nfo 文件内容生成 .vsmeta 文件
    """
    doc = xmldom.parse(nfo_path)
    title = get_node(doc, 'title', '无标题')
    sorttitle = get_node(doc, 'sorttitle', title)
    tagline = get_node(doc, 'tagline', title)
    plot = get_node(doc, 'plot')
    year = get_node(doc, 'year', '1900')
    level = get_node(doc, 'mpaa', 'G')
    date = get_node(doc, 'premiered', '1900-01-01')
    rate = get_node(doc, 'rating', '0')
    genre = get_node_list(doc, 'genre')
    act = get_node_list(doc, 'actor', 'name')
    direc = get_node_list(doc, 'director')
    writ = get_node_list(doc, 'writer')

    buf, group = bytearray(), bytearray()

    # 写入元数据
    write_metadata(buf, title, sorttitle, tagline, year, date, plot, level, rate)

    # 添加演员、导演、流派等信息
    append_group_data(group, act, 0x0A)
    append_group_data(group, direc, 0x12)
    append_group_data(group, genre, 0x1A)
    append_group_data(group, writ, 0x22)

    writeByte(buf, 0x52)
    writeInt(buf, len(group))
    buf.extend(group)
    group.clear()

    # 写入图片数据
    write_image_data(buf, poster_path, 0x8A)
    write_image_data(buf, fanart_path, 0xAA, group)

    # 保存生成的 .vsmeta 文件
    with open(target_path, 'wb') as op:
        op.write(buf)


def write_metadata(buf, title, sorttitle, tagline, year, date, plot, level, rate):
    """
    写入基本元数据
    """
    writeByte(buf, 0x08)
    writeByte(buf, 0x01)
    writeByte(buf, 0x12)
    writeString(buf, title)
    writeByte(buf, 0x1A)
    writeString(buf, sorttitle)
    writeByte(buf, 0x22)
    writeString(buf, tagline)
    writeByte(buf, 0x28)
    writeInt(buf, int(year))
    writeByte(buf, 0x32)
    writeString(buf, date)
    writeByte(buf, 0x38)
    writeByte(buf, 0x01)
    writeByte(buf, 0x42)
    writeString(buf, plot)
    writeByte(buf, 0x5A)
    writeString(buf, level)
    writeByte(buf, 0x60)
    writeInt(buf, int(float(rate) * 10))


def append_group_data(group, data_list, tag):
    """
    添加组数据（如演员、导演、流派等）
    """
    for data in data_list:
        writeByte(group, tag)
        writeString(group, data)


def write_image_data(buf, image_path, tag, group=None):
    """
    写入图片数据
    """
    if os.path.exists(image_path):
        writeByte(buf, tag)
        writeByte(buf, 0x01)
        image_base64 = toBase64(image_path)
        image_md5 = toMd5(image_base64)
        writeString(buf, image_base64)
        writeByte(buf, tag + 0x08)
        writeByte(buf, 0x01)
        writeString(buf, image_md5)

        # 如果传入 group，则追加额外数据
        if group is not None:
            writeByte(group, 0x0A)
            writeString(group, image_base64)
            writeByte(group, 0x12)
            writeString(group, image_md5)
            writeByte(group, 0x18)
            writeInt(group, int(time.time()))
            writeInt(buf, len(group))
            buf.extend(group)
            group.clear()


# 其他辅助函数保持不变
# ...


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Convert nfo metadata to vsmeta.')
    parser.add_argument('--directory', required=True, help='Directory to scan for files')
    parser.add_argument('--poster', default='-poster.jpg', help='Poster file suffix')
    parser.add_argument('--fanart', default='-fanart.jpg', help='Fanart file suffix')
    args = parser.parse_args()

    convert_list = []
    scan_directory(args.directory, convert_list, args.poster, args.fanart)

    logging.info(f'Successfully processed {len(convert_list)} files.')
